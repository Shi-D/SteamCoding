<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    					http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/security 
                        http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- 启用安全注解 -->
	<global-method-security pre-post-annotations="enabled" />

	<!-- 登录页面不过滤 -->
	<http pattern="/login.jsp" security="none" />
	<!-- 对外接口不过滤 -->
	<http pattern="/api/*.action" security="none" />
	<http pattern="/LoginAction_loginFailure.action" security="none" />
	<http pattern="/index/*.action" security="none" />
	<!-- WebService不过滤 -->
	<http pattern="/ws/*" security="none" />
	<!-- 不要过滤图片等静态资源 -->
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.js" security="none" />

	<!-- http配置 -->
	<http auto-config="true" access-denied-page="/403.jsp">
		<form-login login-page="/login.jsp" authentication-failure-url="/login.jsp?error=true" default-target-url="/LoginAction_loginSuccess.action"
			authentication-success-handler-ref="successHandler" authentication-failure-handler-ref="failureHandler" always-use-default-target="false" />
		<http-basic />
		<!--注销用户 -->
		<logout success-handler-ref="logoutSuccessHandler" />
		<remember-me />
		<!-- 增加一个自定义的过滤器完成对AJAX请求时Session过期问题的处理，放在AuthenticationProcessingFilter之后 -->
		<custom-filter after="FORM_LOGIN_FILTER" ref="ajaxTimeoutRedirectFilter" />
		<!-- 增加一个自定义的过滤器完成对AJAX请求时权限问题的处理，放在ExceptionTranslationFilter之后 -->
		<custom-filter after="EXCEPTION_TRANSLATION_FILTER" ref="ajaxAccessDeniedRedirectFilter" />
		<!-- 增加一个自定义的过滤器完成对URL资源的保护控制，放在FilterSecurityInterceptor之后 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="resourceSecurityInterceptor" />
		<!-- 用户登录Session管理	session-fixation-protection: Session固化防护 -->
		<session-management invalid-session-url="/login.jsp" session-fixation-protection="migrateSession">
			<!-- Session并发控制 -->
			<concurrency-control max-sessions="20" expired-url="/login.jsp" />
		</session-management>
	</http>

	<!-- 自定义的过滤器完成对AJAX请求时Session过期问题的处理 -->
	<beans:bean id="ajaxTimeoutRedirectFilter" class="com.framework.authority.security.AjaxTimeoutRedirectFilter" />
	
	<!-- 自定义的过滤器完成对AJAX请求是权限问题的处理 -->
	<beans:bean id="ajaxAccessDeniedRedirectFilter" class="com.framework.authority.security.AjaxAccessDeniedRedirectFilter"/>

	<beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login.jsp" />
	</beans:bean>

	<!-- 注销用户 -->
	<beans:bean id="logoutSuccessHandler" class="com.framework.authority.security.LogoutSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/login.jsp"></beans:property>
	</beans:bean>

	<!--认证成功 -->
	<beans:bean id="successHandler" class="com.framework.authority.security.AuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/LoginAction_loginSuccess.action" />
	</beans:bean>

	<!-- 认证失败 -->
	<beans:bean id="failureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/LoginAction_loginFailure.action" />
	</beans:bean>

	<!--尝试访问没有权限的页面时跳转的页面 -->
	<beans:bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<beans:property name="errorPage" value="/accessDenied.jsp" />
	</beans:bean>

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="resourceSecurityInterceptor" class="com.framework.authority.security.MyFilterSecurityInterceptor">
		<!-- 认证管理器，实现用户认证的入口 -->
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
		<beans:property name="securityMetadataSource" ref="myInvocationSecurityMetadataSource" />
	</beans:bean>

	<!-- 认证管理器 -->
	<authentication-manager alias="myAuthenticationManager">
		<!-- 认证管理器提供者 【user-service-ref】引用的服务组件，通过securityManager进行对用户信息的认证 -->
		<authentication-provider user-service-ref="myUserDetailServiceImpl">
			<!-- 密码采用md5加密方式加密 -->
			<password-encoder base64="false" ref="md5PasswordEncoder">
				<!-- 用username做盐值加密，防止md5字典攻击 -->
				<salt-source user-property="username" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManager" class="com.framework.authority.security.MyAccessDecisionManager" />

	<!-- 资源源数据定义，即定义某一资源可以被哪些权限访问 -->
	<beans:bean id="myInvocationSecurityMetadataSource" class="com.framework.authority.security.MyInvocationSecurityMetadataSource">
		<!-- 实例化需要的参数 -->
		<beans:constructor-arg ref="resourceService" />
		<!-- URL匹配器UrlMatcher需要的参数 -->
		<!-- useAntPath 是否使用Apache Ant的匹配模式，即资源/userManager/** 和/userManager/UserManager_list.action匹配 -->
		<beans:property name="useAntPath">
			<beans:value>true</beans:value>
		</beans:property>
		<!-- lowercaseComparisons 是否在比较URL前将URL都转化成小写，即资源/userManager/** 和/UserManager/××匹配 -->
		<beans:property name="lowercaseComparisons">
			<beans:value>true</beans:value>
		</beans:property>
	</beans:bean>

	<!-- 密码加密 -->
	<beans:bean id="md5PasswordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
</beans:beans>
